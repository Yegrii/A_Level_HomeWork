# 1. Сворити список мінімум з 10 й елементів(тип данних для простоти int або float)
# 	a. Виведіть усі елементи списку з парними індексами.
# 	b. Знайти суму елементів всього списку.
# 	c. Знайти суму парних елементів списку та окремо непарних елементів списку.
# 	d. Виведіть значення найбільшого елемента у списку, а потім індекс цього елемента у списку.
# 		Якщо найбільших елементів кілька, виведіть індекс першого з них.

from random import randint


f_list = []
for i in range(20):
    f_list.append((randint(0, 666)))  # за допомогою randint наповнюємо список числами
print('Список >', f_list)


even_number = f_list[::2]  # парні індекси списку
odd_number = f_list[1::2]  # непарні елементи списку
f_list_sum = sum(f_list)  # сума усіх елементів списку
f_list_max = max(f_list)  # найбільше число списку

print('парні індекси списку >', even_number)
print('непарні елементи списку >', odd_number)
print('сума усіх елементів списку >', f_list_sum)
print('найбільше число списку >', f_list_max)
print('index найбільшого елементу списку >', f_list.index(f_list_max))
print('сума парних елементів списку >', sum(f_list[::2]))
print('сума непарних елементів списку >', sum(f_list[1::2]))

# 2. Написати алгоритм рішення fizzbuzz для 10 трійок чисел, які записані в файл (file_1.txt).
# 	Читайте із файлу перший рядок, берете із неї числа, рахуйте для них fizzbuzz, виводите.

data = []
with open('file_1.txt') as f:
    for line in f:
        data.append([int(i) for i in line.split()])

for el in data:
    for i in range(1, el[-1] + 1):
        if (i % el[0] == 0) and ( i % el[1] == 0):
            print('FB', end=' ')
        elif i % el[0] == 0:
            print('F', end=' ')
        elif i % el[1] == 0:
            print('B', end=' ')
        else:
            print(i, end=' ')

# 3. Створити список (наприклад, розміром 20 елементів) і заповнити елементами (для протсоти можна int або float).
# 	Сортувати список по 5 елементів.
# 	Тобто:
#             перші 5 елементів відсортувати за зростанням,
#             другу п'ятірку елементів за спаданням,
#             третю п'ятірку відсортувати за зростанням і
#             четверту п'ятірку за спаданням.
# Наприклад:
#             на початку [32,43,1,3,4,5,34,5,1,7,10,34,17,11]
#             на виході [1,3,4,32,43,34,5,7,5,1,10,11,17,34]
# Відповідь необхідно повернути в одному списку!
# 	*наприклад - мається на увазі, що це зразковий варіант розміру списку,
# а вам необхідно написати алгоритм, який зможе відсортувати список будь-якого розміру.

